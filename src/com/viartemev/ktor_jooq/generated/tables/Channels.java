/*
 * This file is generated by jOOQ.
 */
package com.viartemev.ktor_jooq.generated.tables;


import com.viartemev.ktor_jooq.generated.Indexes;
import com.viartemev.ktor_jooq.generated.Keys;
import com.viartemev.ktor_jooq.generated.Public;
import com.viartemev.ktor_jooq.generated.tables.records.ChannelsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Channels extends TableImpl<ChannelsRecord> {

    private static final long serialVersionUID = 364972233;

    /**
     * The reference instance of <code>public.channels</code>
     */
    public static final Channels CHANNELS = new Channels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChannelsRecord> getRecordType() {
        return ChannelsRecord.class;
    }

    /**
     * The column <code>public.channels.id</code>.
     */
    public final TableField<ChannelsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.channels.name</code>.
     */
    public final TableField<ChannelsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.channels</code> table reference
     */
    public Channels() {
        this(DSL.name("channels"), null);
    }

    /**
     * Create an aliased <code>public.channels</code> table reference
     */
    public Channels(String alias) {
        this(DSL.name(alias), CHANNELS);
    }

    /**
     * Create an aliased <code>public.channels</code> table reference
     */
    public Channels(Name alias) {
        this(alias, CHANNELS);
    }

    private Channels(Name alias, Table<ChannelsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Channels(Name alias, Table<ChannelsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Channels(Table<O> child, ForeignKey<O, ChannelsRecord> key) {
        super(child, key, CHANNELS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHANNELS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ChannelsRecord> getPrimaryKey() {
        return Keys.CHANNELS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ChannelsRecord>> getKeys() {
        return Arrays.<UniqueKey<ChannelsRecord>>asList(Keys.CHANNELS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Channels as(String alias) {
        return new Channels(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Channels as(Name alias) {
        return new Channels(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Channels rename(String name) {
        return new Channels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Channels rename(Name name) {
        return new Channels(name, null);
    }
}
